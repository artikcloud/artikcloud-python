# coding: utf-8

"""
    ARTIK Cloud API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import artikcloud
from artikcloud.rest import ApiException
from artikcloud.apis.users_api import UsersApi
from artikcloud.models.app_properties import AppProperties
from test.test_artik_base import TestArtikBase


class TestUsersApi(TestArtikBase):
    """ UsersApi unit test stubs """

    def setUp(self):
        configuration = artikcloud.Configuration();
        configuration.access_token = self.properties['user1.token']

        self.api = UsersApi()
        self.user_id = self.api.get_self().data.id

    def tearDown(self):
        pass

    def test_create_user_properties(self):
        """
        Test case for create_user_properties

        Create User Application Properties
        """
        pass

    def test_delete_user_properties(self):
        """
        Test case for delete_user_properties

        Delete User Application Properties
        """
        pass

    def test_get_self(self):
        """
        Test case for get_self

        Get Current User Profile
        """
        response = self.api.get_self()
        self.assertIsNotNone(response)

        user = response.data

        self.assertEqual(user.email, self.properties['user1.email'])
        self.assertEqual(user.id, self.properties['user1.id'])
        self.assertEqual(user.name, self.properties['user1.name'])
        self.assertEqual(user.full_name, self.properties['user1.fullname'])
        self.assertEqual(user.created_on, int(self.properties['user1.createdon']))

        self.assertIsNotNone(user.modified_on)

    def test_get_self_async(self):
        """
        Test case for get_self_async

        Get Self Async
        """
        def callback_function(response):
            self.assertIsNotNone(response)
            self.assertEqual(response.data.name, "maneesh")
            self.assertEqual(response.data.full_name, "Maneesh Sahu")
            self.assertEqual(response.data.email, "maneesh.sahu@ssi.samsung.com")

        thread = self.api.get_self(callback=callback_function)
        thread.join(10)
        if thread.isAlive():
            self.fail("Request timeout")

    def test_get_user_device_types(self):
        """
        Test case for get_user_device_types

        Get User Device Types
        """
        response = self.api.get_user_device_types(user_id=self.user_id)

        self.assertIsNotNone(response)
        self.assertIsNotNone(response.data)
        self.assertIsNotNone(response.data.device_types)

    def test_get_user_devices(self):
        """
        Test case for get_user_devices

        Get User Devices
        """
        response = self.api.get_user_devices(user_id=self.user_id)

        self.assertIsNotNone(response)
        self.assertIsNotNone(response.data)
        self.assertIsNotNone(response.data.devices)

    def test_user_properties(self):
        """
        Test case for get_user_properties

        Get User application properties
        """
        aid = self.properties['user1.aid']
        user_properties = None

        try:
             user_properties = self.api.get_user_properties(user_id=self.user_id, aid=aid)

        except ApiException as ex:

            if ex.status == 404:

                app_properties = AppProperties(properties='abc=def')

                user_properties = self.api.create_user_properties(user_id=self.user_id, properties=app_properties, aid=aid)

            else:
                self.assertFail('Non-404 Error returned by API')

        self.assertIsNotNone(user_properties)

        # Update
        app_properties2 = AppProperties(properties='mno=pqr')
        user_properties2 = self.api.update_user_properties(user_id=self.user_id, properties=app_properties2, aid=aid)

        self.assertIsNotNone(user_properties2)
        self.assertEqual('mno=pqr', user_properties2.data.properties, 'Properties must be the same')

        # Delete
        user_properties3 = self.api.delete_user_properties(user_id=self.user_id, aid=aid)
        self.assertIsNotNone(user_properties3)
        self.assertEqual(user_properties2, user_properties3)


    def test_get_user_rules(self):
        """
        Test case for get_user_rules

        Get User Rules
        """
        response = self.api.get_user_rules(user_id=self.user_id, exclude_disabled=False)

        self.assertIsNotNone(response)
        self.assertIsNotNone(response.data)

    def test_update_user_properties(self):
        """
        Test case for update_user_properties

        Update User Application Properties
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ARTIK Cloud API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import artikcloud
from artikcloud.rest import ApiException
from artikcloud.apis.devices_api import DevicesApi
from test.test_artik_base import TestArtikBase

class TestDevicesApi(TestArtikBase):
    """ DevicesApi unit test stubs """

    def setUp(self):
        configuration = artikcloud.Configuration();
        configuration.access_token = self.properties['device1.token']
        self.api = DevicesApi()

    def tearDown(self):
        pass

    def test_add_device(self):
        """
        Test case for add_device

        Add Device
        """

        pass

    def test_delete_device(self):
        """
        Test case for delete_device

        Delete Device
        """
        pass

    def test_delete_device_token(self):
        """
        Test case for delete_device_token

        Delete Device Token
        """
        pass

    def test_get_device(self):
        """
        Test case for get_device

        Get Device
        """
        pass

    def test_get_device_presence(self):
        """
        Test case for get_device_presence

        Get device presence information
        """

        device_id = self.properties['device1.id']
        response = self.api.get_device_presence(device_id)

        self.assertEqual(device_id, response.sdid, 'Sdids must match')
        self.assertIsNotNone(response.data.last_seen_on, 'last_seen_on')
        self.assertIsNotNone(response.data.connected, 'connected')

    def test_get_device_token(self):
        """
        Test case for get_device_token

        Get Device Token
        """
        pass

    def test_update_device(self):
        """
        Test case for update_device

        Update Device
        """
        pass

    def test_update_device_token(self):
        """
        Test case for update_device_token

        Update Device Token
        """
        pass


if __name__ == '__main__':
    unittest.main()

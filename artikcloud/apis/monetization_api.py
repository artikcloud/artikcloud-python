# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class MonetizationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_pricing_tiers(self, dtid, pricing_tier_info, **kwargs):
        """
        Define devicetype's pricing tiers.
        Define devicetype's pricing tiers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pricing_tiers(dtid, pricing_tier_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: DeviceType ID (required)
        :param DeviceTypePricingTier pricing_tier_info: Pricing tier info (required)
        :return: DeviceTypePricingTier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_pricing_tiers_with_http_info(dtid, pricing_tier_info, **kwargs)
        else:
            (data) = self.create_pricing_tiers_with_http_info(dtid, pricing_tier_info, **kwargs)
            return data

    def create_pricing_tiers_with_http_info(self, dtid, pricing_tier_info, **kwargs):
        """
        Define devicetype's pricing tiers.
        Define devicetype's pricing tiers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pricing_tiers_with_http_info(dtid, pricing_tier_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: DeviceType ID (required)
        :param DeviceTypePricingTier pricing_tier_info: Pricing tier info (required)
        :return: DeviceTypePricingTier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'pricing_tier_info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pricing_tiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `create_pricing_tiers`")
        # verify the required parameter 'pricing_tier_info' is set
        if ('pricing_tier_info' not in params) or (params['pricing_tier_info'] is None):
            raise ValueError("Missing the required parameter `pricing_tier_info` when calling `create_pricing_tiers`")


        collection_formats = {}

        resource_path = '/pricing/devicetypes/{dtid}/pricingtiers'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pricing_tier_info' in params:
            body_params = params['pricing_tier_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceTypePricingTier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pricing_tiers(self, did, **kwargs):
        """
        Get a device's pricing tiers
        Get a device's pricing tiers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pricing_tiers(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID (required)
        :param bool active: Filter by active
        :return: DevicePricingTiersEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pricing_tiers_with_http_info(did, **kwargs)
        else:
            (data) = self.get_pricing_tiers_with_http_info(did, **kwargs)
            return data

    def get_pricing_tiers_with_http_info(self, did, **kwargs):
        """
        Get a device's pricing tiers
        Get a device's pricing tiers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pricing_tiers_with_http_info(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID (required)
        :param bool active: Filter by active
        :return: DevicePricingTiersEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'active']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pricing_tiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_pricing_tiers`")


        collection_formats = {}

        resource_path = '/pricing/devices/{did}/pricingtiers'.replace('{format}', 'json')
        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']

        query_params = {}
        if 'active' in params:
            query_params['active'] = params['active']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DevicePricingTiersEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_the__pricing_tiers(self, dtid, version, **kwargs):
        """
        Get devicetype's pricing tiers.
        Get devicetype's pricing tiers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_the__pricing_tiers(dtid, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: DeviceType ID (required)
        :param int version: Version (required)
        :return: DeviceTypePricingTiersEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_the__pricing_tiers_with_http_info(dtid, version, **kwargs)
        else:
            (data) = self.get_the__pricing_tiers_with_http_info(dtid, version, **kwargs)
            return data

    def get_the__pricing_tiers_with_http_info(self, dtid, version, **kwargs):
        """
        Get devicetype's pricing tiers.
        Get devicetype's pricing tiers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_the__pricing_tiers_with_http_info(dtid, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: DeviceType ID (required)
        :param int version: Version (required)
        :return: DeviceTypePricingTiersEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_the__pricing_tiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_the__pricing_tiers`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_the__pricing_tiers`")


        collection_formats = {}

        resource_path = '/pricing/devicetypes/{dtid}/pricingtiers'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceTypePricingTiersEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_upgrade_path(self, did, action, **kwargs):
        """
        Get upgrade path
        Get upgrade path
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_upgrade_path(did, action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID (required)
        :param str action: Action to perform (required)
        :return: UpgradePathEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_upgrade_path_with_http_info(did, action, **kwargs)
        else:
            (data) = self.get_upgrade_path_with_http_info(did, action, **kwargs)
            return data

    def get_upgrade_path_with_http_info(self, did, action, **kwargs):
        """
        Get upgrade path
        Get upgrade path
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_upgrade_path_with_http_info(did, action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID (required)
        :param str action: Action to perform (required)
        :return: UpgradePathEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'action']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upgrade_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_upgrade_path`")
        # verify the required parameter 'action' is set
        if ('action' not in params) or (params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `get_upgrade_path`")


        collection_formats = {}

        resource_path = '/pricing/devices/{did}/revenueshare/upgradepath'.replace('{format}', 'json')
        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']
        if 'action' in params:
            path_params['action'] = params['action']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpgradePathEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_pricing_tier(self, did, pricing_tier, **kwargs):
        """
        Set a device's pricing tier
        Set a device's pricing tier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_pricing_tier(did, pricing_tier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID (required)
        :param DevicePricingTierRequest pricing_tier: Pricing tier (required)
        :return: DevicePricingTierEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_pricing_tier_with_http_info(did, pricing_tier, **kwargs)
        else:
            (data) = self.set_pricing_tier_with_http_info(did, pricing_tier, **kwargs)
            return data

    def set_pricing_tier_with_http_info(self, did, pricing_tier, **kwargs):
        """
        Set a device's pricing tier
        Set a device's pricing tier
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_pricing_tier_with_http_info(did, pricing_tier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID (required)
        :param DevicePricingTierRequest pricing_tier: Pricing tier (required)
        :return: DevicePricingTierEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'pricing_tier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_pricing_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `set_pricing_tier`")
        # verify the required parameter 'pricing_tier' is set
        if ('pricing_tier' not in params) or (params['pricing_tier'] is None):
            raise ValueError("Missing the required parameter `pricing_tier` when calling `set_pricing_tier`")


        collection_formats = {}

        resource_path = '/pricing/devices/{did}/pricingtiers'.replace('{format}', 'json')
        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pricing_tier' in params:
            body_params = params['pricing_tier']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DevicePricingTierEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

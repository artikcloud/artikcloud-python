# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DevicesManagementApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_tasks(self, task_payload, **kwargs):
        """
        Create a new task for one or more devices
        Create a new task for one or more devices
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tasks(task_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TaskRequest task_payload: Task object to be created (required)
        :return: TaskEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_tasks_with_http_info(task_payload, **kwargs)
        else:
            (data) = self.create_tasks_with_http_info(task_payload, **kwargs)
            return data

    def create_tasks_with_http_info(self, task_payload, **kwargs):
        """
        Create a new task for one or more devices
        Create a new task for one or more devices
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tasks_with_http_info(task_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TaskRequest task_payload: Task object to be created (required)
        :return: TaskEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_payload' is set
        if ('task_payload' not in params) or (params['task_payload'] is None):
            raise ValueError("Missing the required parameter `task_payload` when calling `create_tasks`")


        collection_formats = {}

        resource_path = '/devicemgmt/tasks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_payload' in params:
            body_params = params['task_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_server_properties(self, did, **kwargs):
        """
        Deletes a device's properties.
        Deletes a device's properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_server_properties(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :return: MetadataEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_server_properties_with_http_info(did, **kwargs)
        else:
            (data) = self.delete_server_properties_with_http_info(did, **kwargs)
            return data

    def delete_server_properties_with_http_info(self, did, **kwargs):
        """
        Deletes a device's properties.
        Deletes a device's properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_server_properties_with_http_info(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :return: MetadataEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_server_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `delete_server_properties`")


        collection_formats = {}

        resource_path = '/devicemgmt/devices/{did}/serverproperties'.replace('{format}', 'json')
        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_by_did(self, did, **kwargs):
        """
        Returns the list of tasks for a particular device id with optional status filter.
        Returns the list of tasks for a particular device id with optional status filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_by_did(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str status: Status filter. Comma-separated statuses.
        :param str order: Sort results by a field. Valid fields: createdOn.
        :param str sort: Sort order. Valid values: asc or desc.
        :return: TaskByDidListEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_by_did_with_http_info(did, **kwargs)
        else:
            (data) = self.get_all_by_did_with_http_info(did, **kwargs)
            return data

    def get_all_by_did_with_http_info(self, did, **kwargs):
        """
        Returns the list of tasks for a particular device id with optional status filter.
        Returns the list of tasks for a particular device id with optional status filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_by_did_with_http_info(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str status: Status filter. Comma-separated statuses.
        :param str order: Sort results by a field. Valid fields: createdOn.
        :param str sort: Sort order. Valid values: asc or desc.
        :return: TaskByDidListEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'count', 'offset', 'status', 'order', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_by_did" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_all_by_did`")


        collection_formats = {}

        resource_path = '/devicemgmt/devices/{did}/tasks'.replace('{format}', 'json')
        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskByDidListEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_device_types_info(self, dtid, **kwargs):
        """
        Read a device type device management information.
        Read a device type device management information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_types_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type ID. (required)
        :return: DeviceTypesInfoEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_device_types_info_with_http_info(dtid, **kwargs)
        else:
            (data) = self.get_device_types_info_with_http_info(dtid, **kwargs)
            return data

    def get_device_types_info_with_http_info(self, dtid, **kwargs):
        """
        Read a device type device management information.
        Read a device type device management information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_device_types_info_with_http_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type ID. (required)
        :return: DeviceTypesInfoEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_types_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_device_types_info`")


        collection_formats = {}

        resource_path = '/devicemgmt/devicetypes/{dtid}'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceTypesInfoEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_manifest_properties(self, dtid, **kwargs):
        """
        Get a device type's device management manifest properties
        Get a device type's device management manifest properties
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_manifest_properties(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :return: MetadataPropertiesEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_manifest_properties_with_http_info(dtid, **kwargs)
        else:
            (data) = self.get_manifest_properties_with_http_info(dtid, **kwargs)
            return data

    def get_manifest_properties_with_http_info(self, dtid, **kwargs):
        """
        Get a device type's device management manifest properties
        Get a device type's device management manifest properties
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_manifest_properties_with_http_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :return: MetadataPropertiesEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manifest_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_manifest_properties`")


        collection_formats = {}

        resource_path = '/devicemgmt/devicetypes/{dtid}/manifest/properties'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataPropertiesEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_properties(self, did, **kwargs):
        """
        Read a device's properties.
        Read a device's properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_properties(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :param bool include_timestamp: Include timestamp.
        :return: MetadataEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_properties_with_http_info(did, **kwargs)
        else:
            (data) = self.get_properties_with_http_info(did, **kwargs)
            return data

    def get_properties_with_http_info(self, did, **kwargs):
        """
        Read a device's properties.
        Read a device's properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_properties_with_http_info(did, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :param bool include_timestamp: Include timestamp.
        :return: MetadataEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'include_timestamp']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_properties`")


        collection_formats = {}

        resource_path = '/devicemgmt/devices/{did}/properties'.replace('{format}', 'json')
        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']

        query_params = {}
        if 'include_timestamp' in params:
            query_params['includeTimestamp'] = params['include_timestamp']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_statuses(self, tid, **kwargs):
        """
        Returns the details and status of a task id and the individual statuses of each device id in the list.
        Returns the details and status of a task id and the individual statuses of each device id in the list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statuses(tid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str status: Status filter. Comma-separated statuses.
        :param str dids: Devices filter. Comma-separated device IDs.
        :return: TaskStatusesEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_statuses_with_http_info(tid, **kwargs)
        else:
            (data) = self.get_statuses_with_http_info(tid, **kwargs)
            return data

    def get_statuses_with_http_info(self, tid, **kwargs):
        """
        Returns the details and status of a task id and the individual statuses of each device id in the list.
        Returns the details and status of a task id and the individual statuses of each device id in the list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statuses_with_http_info(tid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str status: Status filter. Comma-separated statuses.
        :param str dids: Devices filter. Comma-separated device IDs.
        :return: TaskStatusesEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid', 'count', 'offset', 'status', 'dids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params) or (params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `get_statuses`")


        collection_formats = {}

        resource_path = '/devicemgmt/tasks/{tid}/statuses'.replace('{format}', 'json')
        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'dids' in params:
            query_params['dids'] = params['dids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskStatusesEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_statuses_history(self, tid, **kwargs):
        """
        Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statuses_history(tid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param str did: Device ID. Optional.
        :return: TaskStatusesHistoryEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_statuses_history_with_http_info(tid, **kwargs)
        else:
            (data) = self.get_statuses_history_with_http_info(tid, **kwargs)
            return data

    def get_statuses_history_with_http_info(self, tid, **kwargs):
        """
        Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_statuses_history_with_http_info(tid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param str did: Device ID. Optional.
        :return: TaskStatusesHistoryEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid', 'did']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statuses_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params) or (params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `get_statuses_history`")


        collection_formats = {}

        resource_path = '/devicemgmt/tasks/{tid}/statuses/history'.replace('{format}', 'json')
        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']

        query_params = {}
        if 'did' in params:
            query_params['did'] = params['did']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskStatusesHistoryEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_task_by_id(self, tid, **kwargs):
        """
        Returns the details and global status of a specific task id.
        Returns the details and global status of a specific task id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_task_by_id(tid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :return: TaskEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_task_by_id_with_http_info(tid, **kwargs)
        else:
            (data) = self.get_task_by_id_with_http_info(tid, **kwargs)
            return data

    def get_task_by_id_with_http_info(self, tid, **kwargs):
        """
        Returns the details and global status of a specific task id.
        Returns the details and global status of a specific task id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_task_by_id_with_http_info(tid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :return: TaskEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params) or (params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `get_task_by_id`")


        collection_formats = {}

        resource_path = '/devicemgmt/tasks/{tid}'.replace('{format}', 'json')
        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tasks(self, dtid, **kwargs):
        """
        Returns the all the tasks for a device type.
        Returns the all the tasks for a device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tasks(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str status: Status filter. Comma-separated statuses.
        :param str order: Sort results by a field. Valid fields: createdOn.
        :param str sort: Sort order. Valid values: asc or desc.
        :return: TaskListEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tasks_with_http_info(dtid, **kwargs)
        else:
            (data) = self.get_tasks_with_http_info(dtid, **kwargs)
            return data

    def get_tasks_with_http_info(self, dtid, **kwargs):
        """
        Returns the all the tasks for a device type.
        Returns the all the tasks for a device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tasks_with_http_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str status: Status filter. Comma-separated statuses.
        :param str order: Sort results by a field. Valid fields: createdOn.
        :param str sort: Sort order. Valid values: asc or desc.
        :return: TaskListEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'count', 'offset', 'status', 'order', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_tasks`")


        collection_formats = {}

        resource_path = '/devicemgmt/tasks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'dtid' in params:
            query_params['dtid'] = params['dtid']
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskListEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_properties(self, dtid, **kwargs):
        """
        Query device properties across devices.
        Query device properties across devices.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_properties(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str filter: Query filter. Comma-separated key=value pairs
        :param bool include_timestamp: Include timestamp.
        :return: MetadataQueryEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_properties_with_http_info(dtid, **kwargs)
        else:
            (data) = self.query_properties_with_http_info(dtid, **kwargs)
            return data

    def query_properties_with_http_info(self, dtid, **kwargs):
        """
        Query device properties across devices.
        Query device properties across devices.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_properties_with_http_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :param str filter: Query filter. Comma-separated key=value pairs
        :param bool include_timestamp: Include timestamp.
        :return: MetadataQueryEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'count', 'offset', 'filter', 'include_timestamp']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `query_properties`")


        collection_formats = {}

        resource_path = '/devicemgmt/devices/properties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'dtid' in params:
            query_params['dtid'] = params['dtid']
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'include_timestamp' in params:
            query_params['includeTimestamp'] = params['include_timestamp']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataQueryEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_device_types_info(self, dtid, device_type_info, **kwargs):
        """
        Updates a device type information
        Updates a device type information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_device_types_info(dtid, device_type_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type ID. (required)
        :param DeviceTypesInfo device_type_info: Device type info object to be set (required)
        :return: DeviceTypesInfoEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_device_types_info_with_http_info(dtid, device_type_info, **kwargs)
        else:
            (data) = self.update_device_types_info_with_http_info(dtid, device_type_info, **kwargs)
            return data

    def update_device_types_info_with_http_info(self, dtid, device_type_info, **kwargs):
        """
        Updates a device type information
        Updates a device type information
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_device_types_info_with_http_info(dtid, device_type_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type ID. (required)
        :param DeviceTypesInfo device_type_info: Device type info object to be set (required)
        :return: DeviceTypesInfoEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'device_type_info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_device_types_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `update_device_types_info`")
        # verify the required parameter 'device_type_info' is set
        if ('device_type_info' not in params) or (params['device_type_info'] is None):
            raise ValueError("Missing the required parameter `device_type_info` when calling `update_device_types_info`")


        collection_formats = {}

        resource_path = '/devicemgmt/devicetypes/{dtid}'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_type_info' in params:
            body_params = params['device_type_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceTypesInfoEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_server_properties(self, did, device_properties, **kwargs):
        """
        Updates a device's server properties.
        Updates a device's server properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_server_properties(did, device_properties, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :param object device_properties: Device properties object to be set (required)
        :return: MetadataEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_server_properties_with_http_info(did, device_properties, **kwargs)
        else:
            (data) = self.update_server_properties_with_http_info(did, device_properties, **kwargs)
            return data

    def update_server_properties_with_http_info(self, did, device_properties, **kwargs):
        """
        Updates a device's server properties.
        Updates a device's server properties.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_server_properties_with_http_info(did, device_properties, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did: Device ID. (required)
        :param object device_properties: Device properties object to be set (required)
        :return: MetadataEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'device_properties']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_server_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_server_properties`")
        # verify the required parameter 'device_properties' is set
        if ('device_properties' not in params) or (params['device_properties'] is None):
            raise ValueError("Missing the required parameter `device_properties` when calling `update_server_properties`")


        collection_formats = {}

        resource_path = '/devicemgmt/devices/{did}/serverproperties'.replace('{format}', 'json')
        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_properties' in params:
            body_params = params['device_properties']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_task(self, tid, task_update_request, **kwargs):
        """
        Updates a task for all devices - For now just allows changing the state to cancelled.
        Updates a task for all devices - For now just allows changing the state to cancelled.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task(tid, task_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param TaskUpdateRequest task_update_request: Task update request (required)
        :return: TaskUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_task_with_http_info(tid, task_update_request, **kwargs)
        else:
            (data) = self.update_task_with_http_info(tid, task_update_request, **kwargs)
            return data

    def update_task_with_http_info(self, tid, task_update_request, **kwargs):
        """
        Updates a task for all devices - For now just allows changing the state to cancelled.
        Updates a task for all devices - For now just allows changing the state to cancelled.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_with_http_info(tid, task_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param TaskUpdateRequest task_update_request: Task update request (required)
        :return: TaskUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid', 'task_update_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params) or (params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `update_task`")
        # verify the required parameter 'task_update_request' is set
        if ('task_update_request' not in params) or (params['task_update_request'] is None):
            raise ValueError("Missing the required parameter `task_update_request` when calling `update_task`")


        collection_formats = {}

        resource_path = '/devicemgmt/tasks/{tid}'.replace('{format}', 'json')
        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_update_request' in params:
            body_params = params['task_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaskUpdateResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_task_for_device(self, tid, did, device_task_update_request, **kwargs):
        """
        Updates a task for a specific device - For now just allows changing the state to cancelled.
        Updates a task for a specific device - For now just allows changing the state to cancelled.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_for_device(tid, did, device_task_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param str did: Device ID. (required)
        :param DeviceTaskUpdateRequest device_task_update_request: Device task update request (required)
        :return: DeviceTaskUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_task_for_device_with_http_info(tid, did, device_task_update_request, **kwargs)
        else:
            (data) = self.update_task_for_device_with_http_info(tid, did, device_task_update_request, **kwargs)
            return data

    def update_task_for_device_with_http_info(self, tid, did, device_task_update_request, **kwargs):
        """
        Updates a task for a specific device - For now just allows changing the state to cancelled.
        Updates a task for a specific device - For now just allows changing the state to cancelled.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_for_device_with_http_info(tid, did, device_task_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tid: Task ID. (required)
        :param str did: Device ID. (required)
        :param DeviceTaskUpdateRequest device_task_update_request: Device task update request (required)
        :return: DeviceTaskUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid', 'did', 'device_task_update_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task_for_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params) or (params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `update_task_for_device`")
        # verify the required parameter 'did' is set
        if ('did' not in params) or (params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_task_for_device`")
        # verify the required parameter 'device_task_update_request' is set
        if ('device_task_update_request' not in params) or (params['device_task_update_request'] is None):
            raise ValueError("Missing the required parameter `device_task_update_request` when calling `update_task_for_device`")


        collection_formats = {}

        resource_path = '/devicemgmt/tasks/{tid}/devices/{did}'.replace('{format}', 'json')
        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']
        if 'did' in params:
            path_params['did'] = params['did']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_task_update_request' in params:
            body_params = params['device_task_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeviceTaskUpdateResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

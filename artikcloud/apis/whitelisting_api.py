# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class WhitelistingApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_vdid(self, dtid, vdid, **kwargs):
        """
        Delete a vdid from the devicetype whitelist.
        Delete a vdid from the devicetype whitelist.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_vdid(dtid, vdid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param str vdid: Vendor Device ID. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_vdid_with_http_info(dtid, vdid, **kwargs)
        else:
            (data) = self.delete_vdid_with_http_info(dtid, vdid, **kwargs)
            return data

    def delete_vdid_with_http_info(self, dtid, vdid, **kwargs):
        """
        Delete a vdid from the devicetype whitelist.
        Delete a vdid from the devicetype whitelist.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_vdid_with_http_info(dtid, vdid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param str vdid: Vendor Device ID. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'vdid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vdid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `delete_vdid`")
        # verify the required parameter 'vdid' is set
        if ('vdid' not in params) or (params['vdid'] is None):
            raise ValueError("Missing the required parameter `vdid` when calling `delete_vdid`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist/{vdid}'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']
        if 'vdid' in params:
            path_params['vdid'] = params['vdid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WhitelistEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_whitelist_certificate(self, dtid, cid, **kwargs):
        """
        Delete a whitelist certificate associated with a devicetype.
        Delete a whitelist certificate associated with a devicetype.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_whitelist_certificate(dtid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param str cid: Certificate ID. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_whitelist_certificate_with_http_info(dtid, cid, **kwargs)
        else:
            (data) = self.delete_whitelist_certificate_with_http_info(dtid, cid, **kwargs)
            return data

    def delete_whitelist_certificate_with_http_info(self, dtid, cid, **kwargs):
        """
        Delete a whitelist certificate associated with a devicetype.
        Delete a whitelist certificate associated with a devicetype.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_whitelist_certificate_with_http_info(dtid, cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param str cid: Certificate ID. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'cid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_whitelist_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `delete_whitelist_certificate`")
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_whitelist_certificate`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist/certificates/{cid}'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WhitelistEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def enable_whitelist(self, dtid, device_type_update_info, **kwargs):
        """
        Enable or disble whitelist feature of a device type
        Enable or disble whitelist feature of a device type
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enable_whitelist(dtid, device_type_update_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param DeviceTypeUpdateInput device_type_update_info: Device type update input. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.enable_whitelist_with_http_info(dtid, device_type_update_info, **kwargs)
        else:
            (data) = self.enable_whitelist_with_http_info(dtid, device_type_update_info, **kwargs)
            return data

    def enable_whitelist_with_http_info(self, dtid, device_type_update_info, **kwargs):
        """
        Enable or disble whitelist feature of a device type
        Enable or disble whitelist feature of a device type
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enable_whitelist_with_http_info(dtid, device_type_update_info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param DeviceTypeUpdateInput device_type_update_info: Device type update input. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'device_type_update_info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_whitelist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `enable_whitelist`")
        # verify the required parameter 'device_type_update_info' is set
        if ('device_type_update_info' not in params) or (params['device_type_update_info'] is None):
            raise ValueError("Missing the required parameter `device_type_update_info` when calling `enable_whitelist`")


        collection_formats = {}

        resource_path = '/devicetypes/:dtid/whitelist/enable'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_type_update_info' in params:
            body_params = params['device_type_update_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WhitelistEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_rejected_row_list(self, dtid, upload_id, **kwargs):
        """
        Get the list of rejected rows for an uploaded CSV file.
        Get the list of rejected rows for an uploaded CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_rejected_row_list(dtid, upload_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type id related to the uploaded CSV file. (required)
        :param str upload_id: Upload id related to the uploaded CSV file. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :return: RejectedCSVRowsEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_rejected_row_list_with_http_info(dtid, upload_id, **kwargs)
        else:
            (data) = self.get_rejected_row_list_with_http_info(dtid, upload_id, **kwargs)
            return data

    def get_rejected_row_list_with_http_info(self, dtid, upload_id, **kwargs):
        """
        Get the list of rejected rows for an uploaded CSV file.
        Get the list of rejected rows for an uploaded CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_rejected_row_list_with_http_info(dtid, upload_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type id related to the uploaded CSV file. (required)
        :param str upload_id: Upload id related to the uploaded CSV file. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :return: RejectedCSVRowsEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'upload_id', 'count', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rejected_row_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_rejected_row_list`")
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params) or (params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `get_rejected_row_list`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist/{uploadId}/rejectedRows'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RejectedCSVRowsEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_upload_status(self, dtid, upload_id, **kwargs):
        """
        Get the status of a uploaded CSV file.
        Get the status of a uploaded CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_upload_status(dtid, upload_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type id related to the uploaded CSV file. (required)
        :param str upload_id: Upload id related to the uploaded CSV file. (required)
        :return: UploadStatusEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_upload_status_with_http_info(dtid, upload_id, **kwargs)
        else:
            (data) = self.get_upload_status_with_http_info(dtid, upload_id, **kwargs)
            return data

    def get_upload_status_with_http_info(self, dtid, upload_id, **kwargs):
        """
        Get the status of a uploaded CSV file.
        Get the status of a uploaded CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_upload_status_with_http_info(dtid, upload_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device type id related to the uploaded CSV file. (required)
        :param str upload_id: Upload id related to the uploaded CSV file. (required)
        :return: UploadStatusEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'upload_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_upload_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_upload_status`")
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params) or (params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `get_upload_status`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist/{uploadId}/status'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UploadStatusEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_whitelist(self, dtid, **kwargs):
        """
        Get whitelisted vdids of a device type.
        Get whitelisted vdids of a device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_whitelist(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :return: WhitelistResultEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_whitelist_with_http_info(dtid, **kwargs)
        else:
            (data) = self.get_whitelist_with_http_info(dtid, **kwargs)
            return data

    def get_whitelist_with_http_info(self, dtid, **kwargs):
        """
        Get whitelisted vdids of a device type.
        Get whitelisted vdids of a device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_whitelist_with_http_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param int count: Max results count.
        :param int offset: Result starting offset.
        :return: WhitelistResultEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'count', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_whitelist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_whitelist`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WhitelistResultEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_whitelist_certificate(self, dtid, **kwargs):
        """
        Get whitelist certificate of device type.
        Get whitelist certificate of device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_whitelist_certificate(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :return: CertificateEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_whitelist_certificate_with_http_info(dtid, **kwargs)
        else:
            (data) = self.get_whitelist_certificate_with_http_info(dtid, **kwargs)
            return data

    def get_whitelist_certificate_with_http_info(self, dtid, **kwargs):
        """
        Get whitelist certificate of device type.
        Get whitelist certificate of device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_whitelist_certificate_with_http_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :return: CertificateEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_whitelist_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_whitelist_certificate`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist/certificates'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CertificateEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_whitelist_status(self, dtid, **kwargs):
        """
        Get the status of whitelist feature (enabled/disabled) of a device type.
        Get the status of whitelist feature (enabled/disabled) of a device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_whitelist_status(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_whitelist_status_with_http_info(dtid, **kwargs)
        else:
            (data) = self.get_whitelist_status_with_http_info(dtid, **kwargs)
            return data

    def get_whitelist_status_with_http_info(self, dtid, **kwargs):
        """
        Get the status of whitelist feature (enabled/disabled) of a device type.
        Get the status of whitelist feature (enabled/disabled) of a device type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_whitelist_status_with_http_info(dtid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :return: WhitelistEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_whitelist_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `get_whitelist_status`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist/status'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WhitelistEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_csv(self, dtid, file, **kwargs):
        """
        Upload a CSV file related to the Device Type.
        Upload a CSV file related to the Device Type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_csv(dtid, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param str file: Device Type ID. (required)
        :return: UploadIdEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_csv_with_http_info(dtid, file, **kwargs)
        else:
            (data) = self.upload_csv_with_http_info(dtid, file, **kwargs)
            return data

    def upload_csv_with_http_info(self, dtid, file, **kwargs):
        """
        Upload a CSV file related to the Device Type.
        Upload a CSV file related to the Device Type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_csv_with_http_info(dtid, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dtid: Device Type ID. (required)
        :param str file: Device Type ID. (required)
        :return: UploadIdEnvelope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dtid', 'file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dtid' is set
        if ('dtid' not in params) or (params['dtid'] is None):
            raise ValueError("Missing the required parameter `dtid` when calling `upload_csv`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_csv`")


        collection_formats = {}

        resource_path = '/devicetypes/{dtid}/whitelist'.replace('{format}', 'json')
        path_params = {}
        if 'dtid' in params:
            path_params['dtid'] = params['dtid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'file' in params:
            body_params = params['file']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['artikcloud_oauth']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UploadIdEnvelope',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

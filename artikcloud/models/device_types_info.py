# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceTypesInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device_properties_enabled=None, pmax=None, modified_on=None, dtid=None, pmin=None, task_expires_after=None, created_on=None):
        """
        DeviceTypesInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_properties_enabled': 'bool',
            'pmax': 'int',
            'modified_on': 'int',
            'dtid': 'str',
            'pmin': 'int',
            'task_expires_after': 'int',
            'created_on': 'int'
        }

        self.attribute_map = {
            'device_properties_enabled': 'devicePropertiesEnabled',
            'pmax': 'pmax',
            'modified_on': 'modifiedOn',
            'dtid': 'dtid',
            'pmin': 'pmin',
            'task_expires_after': 'taskExpiresAfter',
            'created_on': 'createdOn'
        }

        self._device_properties_enabled = device_properties_enabled
        self._pmax = pmax
        self._modified_on = modified_on
        self._dtid = dtid
        self._pmin = pmin
        self._task_expires_after = task_expires_after
        self._created_on = created_on

    @property
    def device_properties_enabled(self):
        """
        Gets the device_properties_enabled of this DeviceTypesInfo.
        Device Properties Enabled

        :return: The device_properties_enabled of this DeviceTypesInfo.
        :rtype: bool
        """
        return self._device_properties_enabled

    @device_properties_enabled.setter
    def device_properties_enabled(self, device_properties_enabled):
        """
        Sets the device_properties_enabled of this DeviceTypesInfo.
        Device Properties Enabled

        :param device_properties_enabled: The device_properties_enabled of this DeviceTypesInfo.
        :type: bool
        """

        self._device_properties_enabled = device_properties_enabled

    @property
    def pmax(self):
        """
        Gets the pmax of this DeviceTypesInfo.
        Pmax value

        :return: The pmax of this DeviceTypesInfo.
        :rtype: int
        """
        return self._pmax

    @pmax.setter
    def pmax(self, pmax):
        """
        Sets the pmax of this DeviceTypesInfo.
        Pmax value

        :param pmax: The pmax of this DeviceTypesInfo.
        :type: int
        """

        self._pmax = pmax

    @property
    def modified_on(self):
        """
        Gets the modified_on of this DeviceTypesInfo.
        Modified on

        :return: The modified_on of this DeviceTypesInfo.
        :rtype: int
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this DeviceTypesInfo.
        Modified on

        :param modified_on: The modified_on of this DeviceTypesInfo.
        :type: int
        """

        self._modified_on = modified_on

    @property
    def dtid(self):
        """
        Gets the dtid of this DeviceTypesInfo.
        Device Type ID

        :return: The dtid of this DeviceTypesInfo.
        :rtype: str
        """
        return self._dtid

    @dtid.setter
    def dtid(self, dtid):
        """
        Sets the dtid of this DeviceTypesInfo.
        Device Type ID

        :param dtid: The dtid of this DeviceTypesInfo.
        :type: str
        """

        self._dtid = dtid

    @property
    def pmin(self):
        """
        Gets the pmin of this DeviceTypesInfo.
        Pmin value

        :return: The pmin of this DeviceTypesInfo.
        :rtype: int
        """
        return self._pmin

    @pmin.setter
    def pmin(self, pmin):
        """
        Sets the pmin of this DeviceTypesInfo.
        Pmin value

        :param pmin: The pmin of this DeviceTypesInfo.
        :type: int
        """

        self._pmin = pmin

    @property
    def task_expires_after(self):
        """
        Gets the task_expires_after of this DeviceTypesInfo.
        Default task expiration time in seconds

        :return: The task_expires_after of this DeviceTypesInfo.
        :rtype: int
        """
        return self._task_expires_after

    @task_expires_after.setter
    def task_expires_after(self, task_expires_after):
        """
        Sets the task_expires_after of this DeviceTypesInfo.
        Default task expiration time in seconds

        :param task_expires_after: The task_expires_after of this DeviceTypesInfo.
        :type: int
        """

        self._task_expires_after = task_expires_after

    @property
    def created_on(self):
        """
        Gets the created_on of this DeviceTypesInfo.
        Created on

        :return: The created_on of this DeviceTypesInfo.
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this DeviceTypesInfo.
        Created on

        :param created_on: The created_on of this DeviceTypesInfo.
        :type: int
        """

        self._created_on = created_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceTypesInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

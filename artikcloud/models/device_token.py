# coding: utf-8

"""
    ARTIK Cloud API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DeviceToken(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_token=None, uid=None, did=None, cid=None):
        """
        DeviceToken - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_token': 'str',
            'uid': 'str',
            'did': 'str',
            'cid': 'str'
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'uid': 'uid',
            'did': 'did',
            'cid': 'cid'
        }

        self._access_token = access_token
        self._uid = uid
        self._did = did
        self._cid = cid

    @property
    def access_token(self):
        """
        Gets the access_token of this DeviceToken.


        :return: The access_token of this DeviceToken.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this DeviceToken.


        :param access_token: The access_token of this DeviceToken.
        :type: str
        """

        self._access_token = access_token

    @property
    def uid(self):
        """
        Gets the uid of this DeviceToken.


        :return: The uid of this DeviceToken.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this DeviceToken.


        :param uid: The uid of this DeviceToken.
        :type: str
        """

        self._uid = uid

    @property
    def did(self):
        """
        Gets the did of this DeviceToken.


        :return: The did of this DeviceToken.
        :rtype: str
        """
        return self._did

    @did.setter
    def did(self, did):
        """
        Sets the did of this DeviceToken.


        :param did: The did of this DeviceToken.
        :type: str
        """

        self._did = did

    @property
    def cid(self):
        """
        Gets the cid of this DeviceToken.


        :return: The cid of this DeviceToken.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """
        Sets the cid of this DeviceToken.


        :param cid: The cid of this DeviceToken.
        :type: str
        """

        self._cid = cid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

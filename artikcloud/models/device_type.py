# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, unique_name=None, latest_version=None, last_updated=None, name=None, description=None, uid=None, oid=None, has_cloud_connector=None, approved=None, published=None, protected=None, in_store=None, owned_by_current_user=None, tags=None, rsp=None, issuer_dn=None, vid=None):
        """
        DeviceType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'unique_name': 'str',
            'latest_version': 'int',
            'last_updated': 'int',
            'name': 'str',
            'description': 'str',
            'uid': 'str',
            'oid': 'str',
            'has_cloud_connector': 'bool',
            'approved': 'bool',
            'published': 'bool',
            'protected': 'bool',
            'in_store': 'bool',
            'owned_by_current_user': 'bool',
            'tags': 'list[Tag]',
            'rsp': 'bool',
            'issuer_dn': 'str',
            'vid': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'unique_name': 'uniqueName',
            'latest_version': 'latestVersion',
            'last_updated': 'lastUpdated',
            'name': 'name',
            'description': 'description',
            'uid': 'uid',
            'oid': 'oid',
            'has_cloud_connector': 'hasCloudConnector',
            'approved': 'approved',
            'published': 'published',
            'protected': 'protected',
            'in_store': 'inStore',
            'owned_by_current_user': 'ownedByCurrentUser',
            'tags': 'tags',
            'rsp': 'rsp',
            'issuer_dn': 'issuerDn',
            'vid': 'vid'
        }

        self._id = id
        self._unique_name = unique_name
        self._latest_version = latest_version
        self._last_updated = last_updated
        self._name = name
        self._description = description
        self._uid = uid
        self._oid = oid
        self._has_cloud_connector = has_cloud_connector
        self._approved = approved
        self._published = published
        self._protected = protected
        self._in_store = in_store
        self._owned_by_current_user = owned_by_current_user
        self._tags = tags
        self._rsp = rsp
        self._issuer_dn = issuer_dn
        self._vid = vid

    @property
    def id(self):
        """
        Gets the id of this DeviceType.
        Device Type ID.

        :return: The id of this DeviceType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeviceType.
        Device Type ID.

        :param id: The id of this DeviceType.
        :type: str
        """

        self._id = id

    @property
    def unique_name(self):
        """
        Gets the unique_name of this DeviceType.
        Unique Name.

        :return: The unique_name of this DeviceType.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """
        Sets the unique_name of this DeviceType.
        Unique Name.

        :param unique_name: The unique_name of this DeviceType.
        :type: str
        """

        self._unique_name = unique_name

    @property
    def latest_version(self):
        """
        Gets the latest_version of this DeviceType.
        Latest Manifest version.

        :return: The latest_version of this DeviceType.
        :rtype: int
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """
        Sets the latest_version of this DeviceType.
        Latest Manifest version.

        :param latest_version: The latest_version of this DeviceType.
        :type: int
        """

        self._latest_version = latest_version

    @property
    def last_updated(self):
        """
        Gets the last_updated of this DeviceType.

        :return: The last_updated of this DeviceType.
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this DeviceType.

        :param last_updated: The last_updated of this DeviceType.
        :type: int
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """
        Gets the name of this DeviceType.
        Name.

        :return: The name of this DeviceType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeviceType.
        Name.

        :param name: The name of this DeviceType.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this DeviceType.
        Description.

        :return: The description of this DeviceType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DeviceType.
        Description.

        :param description: The description of this DeviceType.
        :type: str
        """

        self._description = description

    @property
    def uid(self):
        """
        Gets the uid of this DeviceType.
        User ID.

        :return: The uid of this DeviceType.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this DeviceType.
        User ID.

        :param uid: The uid of this DeviceType.
        :type: str
        """

        self._uid = uid

    @property
    def oid(self):
        """
        Gets the oid of this DeviceType.
        Organization ID.

        :return: The oid of this DeviceType.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """
        Sets the oid of this DeviceType.
        Organization ID.

        :param oid: The oid of this DeviceType.
        :type: str
        """

        self._oid = oid

    @property
    def has_cloud_connector(self):
        """
        Gets the has_cloud_connector of this DeviceType.
        Uses Cloud Connectors SDK

        :return: The has_cloud_connector of this DeviceType.
        :rtype: bool
        """
        return self._has_cloud_connector

    @has_cloud_connector.setter
    def has_cloud_connector(self, has_cloud_connector):
        """
        Sets the has_cloud_connector of this DeviceType.
        Uses Cloud Connectors SDK

        :param has_cloud_connector: The has_cloud_connector of this DeviceType.
        :type: bool
        """

        self._has_cloud_connector = has_cloud_connector

    @property
    def approved(self):
        """
        Gets the approved of this DeviceType.
        Approval status.

        :return: The approved of this DeviceType.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """
        Sets the approved of this DeviceType.
        Approval status.

        :param approved: The approved of this DeviceType.
        :type: bool
        """

        self._approved = approved

    @property
    def published(self):
        """
        Gets the published of this DeviceType.
        Published status.

        :return: The published of this DeviceType.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """
        Sets the published of this DeviceType.
        Published status.

        :param published: The published of this DeviceType.
        :type: bool
        """

        self._published = published

    @property
    def protected(self):
        """
        Gets the protected of this DeviceType.
        Protected status.

        :return: The protected of this DeviceType.
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """
        Sets the protected of this DeviceType.
        Protected status.

        :param protected: The protected of this DeviceType.
        :type: bool
        """

        self._protected = protected

    @property
    def in_store(self):
        """
        Gets the in_store of this DeviceType.
        In Store.

        :return: The in_store of this DeviceType.
        :rtype: bool
        """
        return self._in_store

    @in_store.setter
    def in_store(self, in_store):
        """
        Sets the in_store of this DeviceType.
        In Store.

        :param in_store: The in_store of this DeviceType.
        :type: bool
        """

        self._in_store = in_store

    @property
    def owned_by_current_user(self):
        """
        Gets the owned_by_current_user of this DeviceType.
        Does the current user own a device of this device type

        :return: The owned_by_current_user of this DeviceType.
        :rtype: bool
        """
        return self._owned_by_current_user

    @owned_by_current_user.setter
    def owned_by_current_user(self, owned_by_current_user):
        """
        Sets the owned_by_current_user of this DeviceType.
        Does the current user own a device of this device type

        :param owned_by_current_user: The owned_by_current_user of this DeviceType.
        :type: bool
        """

        self._owned_by_current_user = owned_by_current_user

    @property
    def tags(self):
        """
        Gets the tags of this DeviceType.
        Tags

        :return: The tags of this DeviceType.
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DeviceType.
        Tags

        :param tags: The tags of this DeviceType.
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def rsp(self):
        """
        Gets the rsp of this DeviceType.
        Require Secure Device Registration (SDR) Protocol.

        :return: The rsp of this DeviceType.
        :rtype: bool
        """
        return self._rsp

    @rsp.setter
    def rsp(self, rsp):
        """
        Sets the rsp of this DeviceType.
        Require Secure Device Registration (SDR) Protocol.

        :param rsp: The rsp of this DeviceType.
        :type: bool
        """

        self._rsp = rsp

    @property
    def issuer_dn(self):
        """
        Gets the issuer_dn of this DeviceType.
        Issuer Distinguished Name (Used in SDR)

        :return: The issuer_dn of this DeviceType.
        :rtype: str
        """
        return self._issuer_dn

    @issuer_dn.setter
    def issuer_dn(self, issuer_dn):
        """
        Sets the issuer_dn of this DeviceType.
        Issuer Distinguished Name (Used in SDR)

        :param issuer_dn: The issuer_dn of this DeviceType.
        :type: str
        """

        self._issuer_dn = issuer_dn

    @property
    def vid(self):
        """
        Gets the vid of this DeviceType.
        Vendor ID. (Used in SDR)

        :return: The vid of this DeviceType.
        :rtype: str
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """
        Sets the vid of this DeviceType.
        Vendor ID. (Used in SDR)

        :param vid: The vid of this DeviceType.
        :type: str
        """

        self._vid = vid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

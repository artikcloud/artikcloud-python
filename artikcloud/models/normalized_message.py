# coding: utf-8

"""
    ARTIK Cloud API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NormalizedMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cts=None, ts=None, mid=None, sdid=None, sdtid=None, uid=None, mv=None, data=None):
        """
        NormalizedMessage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cts': 'int',
            'ts': 'int',
            'mid': 'str',
            'sdid': 'str',
            'sdtid': 'str',
            'uid': 'str',
            'mv': 'int',
            'data': 'dict(str, object)'
        }

        self.attribute_map = {
            'cts': 'cts',
            'ts': 'ts',
            'mid': 'mid',
            'sdid': 'sdid',
            'sdtid': 'sdtid',
            'uid': 'uid',
            'mv': 'mv',
            'data': 'data'
        }

        self._cts = cts
        self._ts = ts
        self._mid = mid
        self._sdid = sdid
        self._sdtid = sdtid
        self._uid = uid
        self._mv = mv
        self._data = data

    @property
    def cts(self):
        """
        Gets the cts of this NormalizedMessage.


        :return: The cts of this NormalizedMessage.
        :rtype: int
        """
        return self._cts

    @cts.setter
    def cts(self, cts):
        """
        Sets the cts of this NormalizedMessage.


        :param cts: The cts of this NormalizedMessage.
        :type: int
        """

        self._cts = cts

    @property
    def ts(self):
        """
        Gets the ts of this NormalizedMessage.


        :return: The ts of this NormalizedMessage.
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """
        Sets the ts of this NormalizedMessage.


        :param ts: The ts of this NormalizedMessage.
        :type: int
        """

        self._ts = ts

    @property
    def mid(self):
        """
        Gets the mid of this NormalizedMessage.


        :return: The mid of this NormalizedMessage.
        :rtype: str
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """
        Sets the mid of this NormalizedMessage.


        :param mid: The mid of this NormalizedMessage.
        :type: str
        """

        self._mid = mid

    @property
    def sdid(self):
        """
        Gets the sdid of this NormalizedMessage.


        :return: The sdid of this NormalizedMessage.
        :rtype: str
        """
        return self._sdid

    @sdid.setter
    def sdid(self, sdid):
        """
        Sets the sdid of this NormalizedMessage.


        :param sdid: The sdid of this NormalizedMessage.
        :type: str
        """

        self._sdid = sdid

    @property
    def sdtid(self):
        """
        Gets the sdtid of this NormalizedMessage.


        :return: The sdtid of this NormalizedMessage.
        :rtype: str
        """
        return self._sdtid

    @sdtid.setter
    def sdtid(self, sdtid):
        """
        Sets the sdtid of this NormalizedMessage.


        :param sdtid: The sdtid of this NormalizedMessage.
        :type: str
        """

        self._sdtid = sdtid

    @property
    def uid(self):
        """
        Gets the uid of this NormalizedMessage.


        :return: The uid of this NormalizedMessage.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this NormalizedMessage.


        :param uid: The uid of this NormalizedMessage.
        :type: str
        """

        self._uid = uid

    @property
    def mv(self):
        """
        Gets the mv of this NormalizedMessage.


        :return: The mv of this NormalizedMessage.
        :rtype: int
        """
        return self._mv

    @mv.setter
    def mv(self, mv):
        """
        Sets the mv of this NormalizedMessage.


        :param mv: The mv of this NormalizedMessage.
        :type: int
        """

        self._mv = mv

    @property
    def data(self):
        """
        Gets the data of this NormalizedMessage.


        :return: The data of this NormalizedMessage.
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this NormalizedMessage.


        :param data: The data of this NormalizedMessage.
        :type: dict(str, object)
        """

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceSharing(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, email=None, status=None, shared_on=None):
        """
        DeviceSharing - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'email': 'str',
            'status': 'str',
            'shared_on': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'status': 'status',
            'shared_on': 'sharedOn'
        }

        self._id = id
        self._email = email
        self._status = status
        self._shared_on = shared_on

    @property
    def id(self):
        """
        Gets the id of this DeviceSharing.
        Share ID

        :return: The id of this DeviceSharing.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeviceSharing.
        Share ID

        :param id: The id of this DeviceSharing.
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """
        Gets the email of this DeviceSharing.
        Email

        :return: The email of this DeviceSharing.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this DeviceSharing.
        Email

        :param email: The email of this DeviceSharing.
        :type: str
        """

        self._email = email

    @property
    def status(self):
        """
        Gets the status of this DeviceSharing.
        Status

        :return: The status of this DeviceSharing.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DeviceSharing.
        Status

        :param status: The status of this DeviceSharing.
        :type: str
        """

        self._status = status

    @property
    def shared_on(self):
        """
        Gets the shared_on of this DeviceSharing.
        Shared on

        :return: The shared_on of this DeviceSharing.
        :rtype: int
        """
        return self._shared_on

    @shared_on.setter
    def shared_on(self, shared_on):
        """
        Sets the shared_on of this DeviceSharing.
        Shared on

        :param shared_on: The shared_on of this DeviceSharing.
        :type: int
        """

        self._shared_on = shared_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceSharing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

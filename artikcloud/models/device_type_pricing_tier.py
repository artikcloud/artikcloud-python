# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceTypePricingTier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, revenue_share_percent=None, tiers=None, modified_on=None, comments=None, dtid=None, contact_info=None, pt_type=None, version=None, created_on=None, status=None):
        """
        DeviceTypePricingTier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'revenue_share_percent': 'Object',
            'tiers': 'list[Tier]',
            'modified_on': 'int',
            'comments': 'str',
            'dtid': 'str',
            'contact_info': 'ContactInfo',
            'pt_type': 'str',
            'version': 'int',
            'created_on': 'int',
            'status': 'str'
        }

        self.attribute_map = {
            'revenue_share_percent': 'revenueSharePercent',
            'tiers': 'tiers',
            'modified_on': 'modifiedOn',
            'comments': 'comments',
            'dtid': 'dtid',
            'contact_info': 'contactInfo',
            'pt_type': 'ptType',
            'version': 'version',
            'created_on': 'createdOn',
            'status': 'status'
        }

        self._revenue_share_percent = revenue_share_percent
        self._tiers = tiers
        self._modified_on = modified_on
        self._comments = comments
        self._dtid = dtid
        self._contact_info = contact_info
        self._pt_type = pt_type
        self._version = version
        self._created_on = created_on
        self._status = status

    @property
    def revenue_share_percent(self):
        """
        Gets the revenue_share_percent of this DeviceTypePricingTier.
        revenue share percentage

        :return: The revenue_share_percent of this DeviceTypePricingTier.
        :rtype: Object
        """
        return self._revenue_share_percent

    @revenue_share_percent.setter
    def revenue_share_percent(self, revenue_share_percent):
        """
        Sets the revenue_share_percent of this DeviceTypePricingTier.
        revenue share percentage

        :param revenue_share_percent: The revenue_share_percent of this DeviceTypePricingTier.
        :type: Object
        """

        self._revenue_share_percent = revenue_share_percent

    @property
    def tiers(self):
        """
        Gets the tiers of this DeviceTypePricingTier.
        tiers

        :return: The tiers of this DeviceTypePricingTier.
        :rtype: list[Tier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """
        Sets the tiers of this DeviceTypePricingTier.
        tiers

        :param tiers: The tiers of this DeviceTypePricingTier.
        :type: list[Tier]
        """

        self._tiers = tiers

    @property
    def modified_on(self):
        """
        Gets the modified_on of this DeviceTypePricingTier.
        modified on

        :return: The modified_on of this DeviceTypePricingTier.
        :rtype: int
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this DeviceTypePricingTier.
        modified on

        :param modified_on: The modified_on of this DeviceTypePricingTier.
        :type: int
        """

        self._modified_on = modified_on

    @property
    def comments(self):
        """
        Gets the comments of this DeviceTypePricingTier.
        comments

        :return: The comments of this DeviceTypePricingTier.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this DeviceTypePricingTier.
        comments

        :param comments: The comments of this DeviceTypePricingTier.
        :type: str
        """

        self._comments = comments

    @property
    def dtid(self):
        """
        Gets the dtid of this DeviceTypePricingTier.
        dtid

        :return: The dtid of this DeviceTypePricingTier.
        :rtype: str
        """
        return self._dtid

    @dtid.setter
    def dtid(self, dtid):
        """
        Sets the dtid of this DeviceTypePricingTier.
        dtid

        :param dtid: The dtid of this DeviceTypePricingTier.
        :type: str
        """

        self._dtid = dtid

    @property
    def contact_info(self):
        """
        Gets the contact_info of this DeviceTypePricingTier.
        contact information

        :return: The contact_info of this DeviceTypePricingTier.
        :rtype: ContactInfo
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """
        Sets the contact_info of this DeviceTypePricingTier.
        contact information

        :param contact_info: The contact_info of this DeviceTypePricingTier.
        :type: ContactInfo
        """

        self._contact_info = contact_info

    @property
    def pt_type(self):
        """
        Gets the pt_type of this DeviceTypePricingTier.
        type

        :return: The pt_type of this DeviceTypePricingTier.
        :rtype: str
        """
        return self._pt_type

    @pt_type.setter
    def pt_type(self, pt_type):
        """
        Sets the pt_type of this DeviceTypePricingTier.
        type

        :param pt_type: The pt_type of this DeviceTypePricingTier.
        :type: str
        """

        self._pt_type = pt_type

    @property
    def version(self):
        """
        Gets the version of this DeviceTypePricingTier.
        version

        :return: The version of this DeviceTypePricingTier.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this DeviceTypePricingTier.
        version

        :param version: The version of this DeviceTypePricingTier.
        :type: int
        """

        self._version = version

    @property
    def created_on(self):
        """
        Gets the created_on of this DeviceTypePricingTier.
        created on

        :return: The created_on of this DeviceTypePricingTier.
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this DeviceTypePricingTier.
        created on

        :param created_on: The created_on of this DeviceTypePricingTier.
        :type: int
        """

        self._created_on = created_on

    @property
    def status(self):
        """
        Gets the status of this DeviceTypePricingTier.
        status

        :return: The status of this DeviceTypePricingTier.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DeviceTypePricingTier.
        status

        :param status: The status of this DeviceTypePricingTier.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceTypePricingTier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

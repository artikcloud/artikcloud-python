# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceStatusData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_time_online=None, last_action_ts=None, last_message_ts=None, availability=None, snapshot=None):
        """
        DeviceStatusData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_time_online': 'int',
            'last_action_ts': 'int',
            'last_message_ts': 'int',
            'availability': 'str',
            'snapshot': 'dict(str, object)'
        }

        self.attribute_map = {
            'last_time_online': 'lastTimeOnline',
            'last_action_ts': 'lastActionTs',
            'last_message_ts': 'lastMessageTs',
            'availability': 'availability',
            'snapshot': 'snapshot'
        }

        self._last_time_online = last_time_online
        self._last_action_ts = last_action_ts
        self._last_message_ts = last_message_ts
        self._availability = availability
        self._snapshot = snapshot

    @property
    def last_time_online(self):
        """
        Gets the last_time_online of this DeviceStatusData.

        :return: The last_time_online of this DeviceStatusData.
        :rtype: int
        """
        return self._last_time_online

    @last_time_online.setter
    def last_time_online(self, last_time_online):
        """
        Sets the last_time_online of this DeviceStatusData.

        :param last_time_online: The last_time_online of this DeviceStatusData.
        :type: int
        """

        self._last_time_online = last_time_online

    @property
    def last_action_ts(self):
        """
        Gets the last_action_ts of this DeviceStatusData.

        :return: The last_action_ts of this DeviceStatusData.
        :rtype: int
        """
        return self._last_action_ts

    @last_action_ts.setter
    def last_action_ts(self, last_action_ts):
        """
        Sets the last_action_ts of this DeviceStatusData.

        :param last_action_ts: The last_action_ts of this DeviceStatusData.
        :type: int
        """

        self._last_action_ts = last_action_ts

    @property
    def last_message_ts(self):
        """
        Gets the last_message_ts of this DeviceStatusData.

        :return: The last_message_ts of this DeviceStatusData.
        :rtype: int
        """
        return self._last_message_ts

    @last_message_ts.setter
    def last_message_ts(self, last_message_ts):
        """
        Sets the last_message_ts of this DeviceStatusData.

        :param last_message_ts: The last_message_ts of this DeviceStatusData.
        :type: int
        """

        self._last_message_ts = last_message_ts

    @property
    def availability(self):
        """
        Gets the availability of this DeviceStatusData.

        :return: The availability of this DeviceStatusData.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this DeviceStatusData.

        :param availability: The availability of this DeviceStatusData.
        :type: str
        """

        self._availability = availability

    @property
    def snapshot(self):
        """
        Gets the snapshot of this DeviceStatusData.

        :return: The snapshot of this DeviceStatusData.
        :rtype: dict(str, object)
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """
        Sets the snapshot of this DeviceStatusData.

        :param snapshot: The snapshot of this DeviceStatusData.
        :type: dict(str, object)
        """

        self._snapshot = snapshot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

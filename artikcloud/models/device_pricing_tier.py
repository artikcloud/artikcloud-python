# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DevicePricingTier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message_limit=None, cost=None, name=None, description=None, active=None, interval=None, ptid=None, type=None, billing_interval=None):
        """
        DevicePricingTier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message_limit': 'int',
            'cost': 'str',
            'name': 'str',
            'description': 'str',
            'active': 'bool',
            'interval': 'str',
            'ptid': 'str',
            'type': 'str',
            'billing_interval': 'str'
        }

        self.attribute_map = {
            'message_limit': 'messageLimit',
            'cost': 'cost',
            'name': 'name',
            'description': 'description',
            'active': 'active',
            'interval': 'interval',
            'ptid': 'ptid',
            'type': 'type',
            'billing_interval': 'billingInterval'
        }

        self._message_limit = message_limit
        self._cost = cost
        self._name = name
        self._description = description
        self._active = active
        self._interval = interval
        self._ptid = ptid
        self._type = type
        self._billing_interval = billing_interval

    @property
    def message_limit(self):
        """
        Gets the message_limit of this DevicePricingTier.
        Message Limit

        :return: The message_limit of this DevicePricingTier.
        :rtype: int
        """
        return self._message_limit

    @message_limit.setter
    def message_limit(self, message_limit):
        """
        Sets the message_limit of this DevicePricingTier.
        Message Limit

        :param message_limit: The message_limit of this DevicePricingTier.
        :type: int
        """

        self._message_limit = message_limit

    @property
    def cost(self):
        """
        Gets the cost of this DevicePricingTier.
        Cost

        :return: The cost of this DevicePricingTier.
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this DevicePricingTier.
        Cost

        :param cost: The cost of this DevicePricingTier.
        :type: str
        """

        self._cost = cost

    @property
    def name(self):
        """
        Gets the name of this DevicePricingTier.
        Name

        :return: The name of this DevicePricingTier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DevicePricingTier.
        Name

        :param name: The name of this DevicePricingTier.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this DevicePricingTier.
        Description

        :return: The description of this DevicePricingTier.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DevicePricingTier.
        Description

        :param description: The description of this DevicePricingTier.
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """
        Gets the active of this DevicePricingTier.
        Active

        :return: The active of this DevicePricingTier.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this DevicePricingTier.
        Active

        :param active: The active of this DevicePricingTier.
        :type: bool
        """

        self._active = active

    @property
    def interval(self):
        """
        Gets the interval of this DevicePricingTier.
        Interval

        :return: The interval of this DevicePricingTier.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this DevicePricingTier.
        Interval

        :param interval: The interval of this DevicePricingTier.
        :type: str
        """

        self._interval = interval

    @property
    def ptid(self):
        """
        Gets the ptid of this DevicePricingTier.
        Pricing Tier ID

        :return: The ptid of this DevicePricingTier.
        :rtype: str
        """
        return self._ptid

    @ptid.setter
    def ptid(self, ptid):
        """
        Sets the ptid of this DevicePricingTier.
        Pricing Tier ID

        :param ptid: The ptid of this DevicePricingTier.
        :type: str
        """

        self._ptid = ptid

    @property
    def type(self):
        """
        Gets the type of this DevicePricingTier.
        Type

        :return: The type of this DevicePricingTier.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DevicePricingTier.
        Type

        :param type: The type of this DevicePricingTier.
        :type: str
        """

        self._type = type

    @property
    def billing_interval(self):
        """
        Gets the billing_interval of this DevicePricingTier.
        Billing Interval

        :return: The billing_interval of this DevicePricingTier.
        :rtype: str
        """
        return self._billing_interval

    @billing_interval.setter
    def billing_interval(self, billing_interval):
        """
        Sets the billing_interval of this DevicePricingTier.
        Billing Interval

        :param billing_interval: The billing_interval of this DevicePricingTier.
        :type: str
        """

        self._billing_interval = billing_interval

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DevicePricingTier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RuleError(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, error_code=None, field_path=None, message_args=None, message_key=None):
        """
        RuleError - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error_code': 'int',
            'field_path': 'FieldPath',
            'message_args': 'list[str]',
            'message_key': 'str'
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'field_path': 'fieldPath',
            'message_args': 'messageArgs',
            'message_key': 'messageKey'
        }

        self._error_code = error_code
        self._field_path = field_path
        self._message_args = message_args
        self._message_key = message_key

    @property
    def error_code(self):
        """
        Gets the error_code of this RuleError.

        :return: The error_code of this RuleError.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """
        Sets the error_code of this RuleError.

        :param error_code: The error_code of this RuleError.
        :type: int
        """

        self._error_code = error_code

    @property
    def field_path(self):
        """
        Gets the field_path of this RuleError.

        :return: The field_path of this RuleError.
        :rtype: FieldPath
        """
        return self._field_path

    @field_path.setter
    def field_path(self, field_path):
        """
        Sets the field_path of this RuleError.

        :param field_path: The field_path of this RuleError.
        :type: FieldPath
        """

        self._field_path = field_path

    @property
    def message_args(self):
        """
        Gets the message_args of this RuleError.

        :return: The message_args of this RuleError.
        :rtype: list[str]
        """
        return self._message_args

    @message_args.setter
    def message_args(self, message_args):
        """
        Sets the message_args of this RuleError.

        :param message_args: The message_args of this RuleError.
        :type: list[str]
        """

        self._message_args = message_args

    @property
    def message_key(self):
        """
        Gets the message_key of this RuleError.

        :return: The message_key of this RuleError.
        :rtype: str
        """
        return self._message_key

    @message_key.setter
    def message_key(self, message_key):
        """
        Sets the message_key of this RuleError.

        :param message_key: The message_key of this RuleError.
        :type: str
        """

        self._message_key = message_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RuleError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

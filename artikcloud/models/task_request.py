# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaskRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, filter=None, task_type=None, dtid=None, _property=None, dids=None, task_parameters=None):
        """
        TaskRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'filter': 'str',
            'task_type': 'str',
            'dtid': 'str',
            '_property': 'str',
            'dids': 'list[str]',
            'task_parameters': 'TaskParameters'
        }

        self.attribute_map = {
            'filter': 'filter',
            'task_type': 'taskType',
            'dtid': 'dtid',
            '_property': 'property',
            'dids': 'dids',
            'task_parameters': 'taskParameters'
        }

        self._filter = filter
        self._task_type = task_type
        self._dtid = dtid
        self.__property = _property
        self._dids = dids
        self._task_parameters = task_parameters

    @property
    def filter(self):
        """
        Gets the filter of this TaskRequest.
        Filter

        :return: The filter of this TaskRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this TaskRequest.
        Filter

        :param filter: The filter of this TaskRequest.
        :type: str
        """

        self._filter = filter

    @property
    def task_type(self):
        """
        Gets the task_type of this TaskRequest.
        Task type

        :return: The task_type of this TaskRequest.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """
        Sets the task_type of this TaskRequest.
        Task type

        :param task_type: The task_type of this TaskRequest.
        :type: str
        """

        self._task_type = task_type

    @property
    def dtid(self):
        """
        Gets the dtid of this TaskRequest.
        Device Type ID

        :return: The dtid of this TaskRequest.
        :rtype: str
        """
        return self._dtid

    @dtid.setter
    def dtid(self, dtid):
        """
        Sets the dtid of this TaskRequest.
        Device Type ID

        :param dtid: The dtid of this TaskRequest.
        :type: str
        """

        self._dtid = dtid

    @property
    def _property(self):
        """
        Gets the _property of this TaskRequest.
        Property

        :return: The _property of this TaskRequest.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """
        Sets the _property of this TaskRequest.
        Property

        :param _property: The _property of this TaskRequest.
        :type: str
        """

        self.__property = _property

    @property
    def dids(self):
        """
        Gets the dids of this TaskRequest.
        Device IDs

        :return: The dids of this TaskRequest.
        :rtype: list[str]
        """
        return self._dids

    @dids.setter
    def dids(self, dids):
        """
        Sets the dids of this TaskRequest.
        Device IDs

        :param dids: The dids of this TaskRequest.
        :type: list[str]
        """

        self._dids = dids

    @property
    def task_parameters(self):
        """
        Gets the task_parameters of this TaskRequest.
        Task parameters

        :return: The task_parameters of this TaskRequest.
        :rtype: TaskParameters
        """
        return self._task_parameters

    @task_parameters.setter
    def task_parameters(self, task_parameters):
        """
        Sets the task_parameters of this TaskRequest.
        Task parameters

        :param task_parameters: The task_parameters of this TaskRequest.
        :type: TaskParameters
        """

        self._task_parameters = task_parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaskRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

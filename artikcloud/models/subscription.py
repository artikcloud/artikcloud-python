# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Subscription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aws_region=None, include_shared_devices=None, description=None, aws_key=None, aws_secret=None, created_on=None, aws_kinesis_stream_name=None, uid=None, message_type=None, ddid=None, subscription_type=None, name=None, sdid=None, callback_url=None, id=None, aid=None, sdtid=None):
        """
        Subscription - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aws_region': 'str',
            'include_shared_devices': 'bool',
            'description': 'str',
            'aws_key': 'str',
            'aws_secret': 'str',
            'created_on': 'int',
            'aws_kinesis_stream_name': 'str',
            'uid': 'str',
            'message_type': 'str',
            'ddid': 'str',
            'subscription_type': 'str',
            'name': 'str',
            'sdid': 'str',
            'callback_url': 'str',
            'id': 'str',
            'aid': 'str',
            'sdtid': 'str'
        }

        self.attribute_map = {
            'aws_region': 'awsRegion',
            'include_shared_devices': 'includeSharedDevices',
            'description': 'description',
            'aws_key': 'awsKey',
            'aws_secret': 'awsSecret',
            'created_on': 'createdOn',
            'aws_kinesis_stream_name': 'awsKinesisStreamName',
            'uid': 'uid',
            'message_type': 'messageType',
            'ddid': 'ddid',
            'subscription_type': 'subscriptionType',
            'name': 'name',
            'sdid': 'sdid',
            'callback_url': 'callbackUrl',
            'id': 'id',
            'aid': 'aid',
            'sdtid': 'sdtid'
        }

        self._aws_region = aws_region
        self._include_shared_devices = include_shared_devices
        self._description = description
        self._aws_key = aws_key
        self._aws_secret = aws_secret
        self._created_on = created_on
        self._aws_kinesis_stream_name = aws_kinesis_stream_name
        self._uid = uid
        self._message_type = message_type
        self._ddid = ddid
        self._subscription_type = subscription_type
        self._name = name
        self._sdid = sdid
        self._callback_url = callback_url
        self._id = id
        self._aid = aid
        self._sdtid = sdtid

    @property
    def aws_region(self):
        """
        Gets the aws_region of this Subscription.
        AWS region (if subscriptionType is awsKinesis

        :return: The aws_region of this Subscription.
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """
        Sets the aws_region of this Subscription.
        AWS region (if subscriptionType is awsKinesis

        :param aws_region: The aws_region of this Subscription.
        :type: str
        """

        self._aws_region = aws_region

    @property
    def include_shared_devices(self):
        """
        Gets the include_shared_devices of this Subscription.
        Include Shared Devices

        :return: The include_shared_devices of this Subscription.
        :rtype: bool
        """
        return self._include_shared_devices

    @include_shared_devices.setter
    def include_shared_devices(self, include_shared_devices):
        """
        Sets the include_shared_devices of this Subscription.
        Include Shared Devices

        :param include_shared_devices: The include_shared_devices of this Subscription.
        :type: bool
        """

        self._include_shared_devices = include_shared_devices

    @property
    def description(self):
        """
        Gets the description of this Subscription.
        Description

        :return: The description of this Subscription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Subscription.
        Description

        :param description: The description of this Subscription.
        :type: str
        """

        self._description = description

    @property
    def aws_key(self):
        """
        Gets the aws_key of this Subscription.
        AWS key (if subscriptionType is awsKinesis

        :return: The aws_key of this Subscription.
        :rtype: str
        """
        return self._aws_key

    @aws_key.setter
    def aws_key(self, aws_key):
        """
        Sets the aws_key of this Subscription.
        AWS key (if subscriptionType is awsKinesis

        :param aws_key: The aws_key of this Subscription.
        :type: str
        """

        self._aws_key = aws_key

    @property
    def aws_secret(self):
        """
        Gets the aws_secret of this Subscription.
        AWS secret (if subscriptionType is awsKinesis

        :return: The aws_secret of this Subscription.
        :rtype: str
        """
        return self._aws_secret

    @aws_secret.setter
    def aws_secret(self, aws_secret):
        """
        Sets the aws_secret of this Subscription.
        AWS secret (if subscriptionType is awsKinesis

        :param aws_secret: The aws_secret of this Subscription.
        :type: str
        """

        self._aws_secret = aws_secret

    @property
    def created_on(self):
        """
        Gets the created_on of this Subscription.
        Creation timestamp

        :return: The created_on of this Subscription.
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Subscription.
        Creation timestamp

        :param created_on: The created_on of this Subscription.
        :type: int
        """

        self._created_on = created_on

    @property
    def aws_kinesis_stream_name(self):
        """
        Gets the aws_kinesis_stream_name of this Subscription.
        AWS Kinesis stream name (if subscriptionType is awsKinesis

        :return: The aws_kinesis_stream_name of this Subscription.
        :rtype: str
        """
        return self._aws_kinesis_stream_name

    @aws_kinesis_stream_name.setter
    def aws_kinesis_stream_name(self, aws_kinesis_stream_name):
        """
        Sets the aws_kinesis_stream_name of this Subscription.
        AWS Kinesis stream name (if subscriptionType is awsKinesis

        :param aws_kinesis_stream_name: The aws_kinesis_stream_name of this Subscription.
        :type: str
        """

        self._aws_kinesis_stream_name = aws_kinesis_stream_name

    @property
    def uid(self):
        """
        Gets the uid of this Subscription.
        User ID

        :return: The uid of this Subscription.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this Subscription.
        User ID

        :param uid: The uid of this Subscription.
        :type: str
        """

        self._uid = uid

    @property
    def message_type(self):
        """
        Gets the message_type of this Subscription.
        Message type

        :return: The message_type of this Subscription.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this Subscription.
        Message type

        :param message_type: The message_type of this Subscription.
        :type: str
        """

        self._message_type = message_type

    @property
    def ddid(self):
        """
        Gets the ddid of this Subscription.
        Destination device ID

        :return: The ddid of this Subscription.
        :rtype: str
        """
        return self._ddid

    @ddid.setter
    def ddid(self, ddid):
        """
        Sets the ddid of this Subscription.
        Destination device ID

        :param ddid: The ddid of this Subscription.
        :type: str
        """

        self._ddid = ddid

    @property
    def subscription_type(self):
        """
        Gets the subscription_type of this Subscription.
        Subscription type (either httpCallback or awsKinesis, default to httpCallback)

        :return: The subscription_type of this Subscription.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """
        Sets the subscription_type of this Subscription.
        Subscription type (either httpCallback or awsKinesis, default to httpCallback)

        :param subscription_type: The subscription_type of this Subscription.
        :type: str
        """

        self._subscription_type = subscription_type

    @property
    def name(self):
        """
        Gets the name of this Subscription.
        Name

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Subscription.
        Name

        :param name: The name of this Subscription.
        :type: str
        """

        self._name = name

    @property
    def sdid(self):
        """
        Gets the sdid of this Subscription.
        Source device ID

        :return: The sdid of this Subscription.
        :rtype: str
        """
        return self._sdid

    @sdid.setter
    def sdid(self, sdid):
        """
        Sets the sdid of this Subscription.
        Source device ID

        :param sdid: The sdid of this Subscription.
        :type: str
        """

        self._sdid = sdid

    @property
    def callback_url(self):
        """
        Gets the callback_url of this Subscription.
        Callback URL

        :return: The callback_url of this Subscription.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """
        Sets the callback_url of this Subscription.
        Callback URL

        :param callback_url: The callback_url of this Subscription.
        :type: str
        """

        self._callback_url = callback_url

    @property
    def id(self):
        """
        Gets the id of this Subscription.
        Subscription ID

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Subscription.
        Subscription ID

        :param id: The id of this Subscription.
        :type: str
        """

        self._id = id

    @property
    def aid(self):
        """
        Gets the aid of this Subscription.
        Application ID

        :return: The aid of this Subscription.
        :rtype: str
        """
        return self._aid

    @aid.setter
    def aid(self, aid):
        """
        Sets the aid of this Subscription.
        Application ID

        :param aid: The aid of this Subscription.
        :type: str
        """

        self._aid = aid

    @property
    def sdtid(self):
        """
        Gets the sdtid of this Subscription.
        Source device type ID

        :return: The sdtid of this Subscription.
        :rtype: str
        """
        return self._sdtid

    @sdtid.setter
    def sdtid(self, sdtid):
        """
        Sets the sdtid of this Subscription.
        Source device type ID

        :param sdtid: The sdtid of this Subscription.
        :type: str
        """

        self._sdtid = sdtid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

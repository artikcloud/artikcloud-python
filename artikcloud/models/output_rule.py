# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OutputRule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aid=None, created_on=None, description=None, enabled=None, error=None, id=None, index=None, invalidated_on=None, language_version=None, modified_on=None, name=None, rule=None, uid=None, warning=None):
        """
        OutputRule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aid': 'str',
            'created_on': 'int',
            'description': 'str',
            'enabled': 'bool',
            'error': 'RuleError',
            'id': 'str',
            'index': 'int',
            'invalidated_on': 'int',
            'language_version': 'int',
            'modified_on': 'int',
            'name': 'str',
            'rule': 'dict(str, object)',
            'uid': 'str',
            'warning': 'RuleWarningOutput'
        }

        self.attribute_map = {
            'aid': 'aid',
            'created_on': 'createdOn',
            'description': 'description',
            'enabled': 'enabled',
            'error': 'error',
            'id': 'id',
            'index': 'index',
            'invalidated_on': 'invalidatedOn',
            'language_version': 'languageVersion',
            'modified_on': 'modifiedOn',
            'name': 'name',
            'rule': 'rule',
            'uid': 'uid',
            'warning': 'warning'
        }

        self._aid = aid
        self._created_on = created_on
        self._description = description
        self._enabled = enabled
        self._error = error
        self._id = id
        self._index = index
        self._invalidated_on = invalidated_on
        self._language_version = language_version
        self._modified_on = modified_on
        self._name = name
        self._rule = rule
        self._uid = uid
        self._warning = warning

    @property
    def aid(self):
        """
        Gets the aid of this OutputRule.

        :return: The aid of this OutputRule.
        :rtype: str
        """
        return self._aid

    @aid.setter
    def aid(self, aid):
        """
        Sets the aid of this OutputRule.

        :param aid: The aid of this OutputRule.
        :type: str
        """

        self._aid = aid

    @property
    def created_on(self):
        """
        Gets the created_on of this OutputRule.

        :return: The created_on of this OutputRule.
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this OutputRule.

        :param created_on: The created_on of this OutputRule.
        :type: int
        """

        self._created_on = created_on

    @property
    def description(self):
        """
        Gets the description of this OutputRule.

        :return: The description of this OutputRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this OutputRule.

        :param description: The description of this OutputRule.
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this OutputRule.

        :return: The enabled of this OutputRule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this OutputRule.

        :param enabled: The enabled of this OutputRule.
        :type: bool
        """

        self._enabled = enabled

    @property
    def error(self):
        """
        Gets the error of this OutputRule.

        :return: The error of this OutputRule.
        :rtype: RuleError
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this OutputRule.

        :param error: The error of this OutputRule.
        :type: RuleError
        """

        self._error = error

    @property
    def id(self):
        """
        Gets the id of this OutputRule.

        :return: The id of this OutputRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OutputRule.

        :param id: The id of this OutputRule.
        :type: str
        """

        self._id = id

    @property
    def index(self):
        """
        Gets the index of this OutputRule.

        :return: The index of this OutputRule.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this OutputRule.

        :param index: The index of this OutputRule.
        :type: int
        """

        self._index = index

    @property
    def invalidated_on(self):
        """
        Gets the invalidated_on of this OutputRule.

        :return: The invalidated_on of this OutputRule.
        :rtype: int
        """
        return self._invalidated_on

    @invalidated_on.setter
    def invalidated_on(self, invalidated_on):
        """
        Sets the invalidated_on of this OutputRule.

        :param invalidated_on: The invalidated_on of this OutputRule.
        :type: int
        """

        self._invalidated_on = invalidated_on

    @property
    def language_version(self):
        """
        Gets the language_version of this OutputRule.

        :return: The language_version of this OutputRule.
        :rtype: int
        """
        return self._language_version

    @language_version.setter
    def language_version(self, language_version):
        """
        Sets the language_version of this OutputRule.

        :param language_version: The language_version of this OutputRule.
        :type: int
        """

        self._language_version = language_version

    @property
    def modified_on(self):
        """
        Gets the modified_on of this OutputRule.

        :return: The modified_on of this OutputRule.
        :rtype: int
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this OutputRule.

        :param modified_on: The modified_on of this OutputRule.
        :type: int
        """

        self._modified_on = modified_on

    @property
    def name(self):
        """
        Gets the name of this OutputRule.

        :return: The name of this OutputRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OutputRule.

        :param name: The name of this OutputRule.
        :type: str
        """

        self._name = name

    @property
    def rule(self):
        """
        Gets the rule of this OutputRule.

        :return: The rule of this OutputRule.
        :rtype: dict(str, object)
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """
        Sets the rule of this OutputRule.

        :param rule: The rule of this OutputRule.
        :type: dict(str, object)
        """

        self._rule = rule

    @property
    def uid(self):
        """
        Gets the uid of this OutputRule.

        :return: The uid of this OutputRule.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this OutputRule.

        :param uid: The uid of this OutputRule.
        :type: str
        """

        self._uid = uid

    @property
    def warning(self):
        """
        Gets the warning of this OutputRule.

        :return: The warning of this OutputRule.
        :rtype: RuleWarningOutput
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """
        Sets the warning of this OutputRule.

        :param warning: The warning of this OutputRule.
        :type: RuleWarningOutput
        """

        self._warning = warning

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OutputRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

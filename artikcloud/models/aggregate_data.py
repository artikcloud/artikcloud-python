# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AggregateData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, count=None, max=None, mean=None, min=None, sum=None, variance=None):
        """
        AggregateData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'count': 'int',
            'max': 'float',
            'mean': 'float',
            'min': 'float',
            'sum': 'float',
            'variance': 'float'
        }

        self.attribute_map = {
            'count': 'count',
            'max': 'max',
            'mean': 'mean',
            'min': 'min',
            'sum': 'sum',
            'variance': 'variance'
        }

        self._count = count
        self._max = max
        self._mean = mean
        self._min = min
        self._sum = sum
        self._variance = variance

    @property
    def count(self):
        """
        Gets the count of this AggregateData.

        :return: The count of this AggregateData.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this AggregateData.

        :param count: The count of this AggregateData.
        :type: int
        """

        self._count = count

    @property
    def max(self):
        """
        Gets the max of this AggregateData.

        :return: The max of this AggregateData.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this AggregateData.

        :param max: The max of this AggregateData.
        :type: float
        """

        self._max = max

    @property
    def mean(self):
        """
        Gets the mean of this AggregateData.

        :return: The mean of this AggregateData.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """
        Sets the mean of this AggregateData.

        :param mean: The mean of this AggregateData.
        :type: float
        """

        self._mean = mean

    @property
    def min(self):
        """
        Gets the min of this AggregateData.

        :return: The min of this AggregateData.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this AggregateData.

        :param min: The min of this AggregateData.
        :type: float
        """

        self._min = min

    @property
    def sum(self):
        """
        Gets the sum of this AggregateData.

        :return: The sum of this AggregateData.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """
        Sets the sum of this AggregateData.

        :param sum: The sum of this AggregateData.
        :type: float
        """

        self._sum = sum

    @property
    def variance(self):
        """
        Gets the variance of this AggregateData.

        :return: The variance of this AggregateData.
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """
        Sets the variance of this AggregateData.

        :param variance: The variance of this AggregateData.
        :type: float
        """

        self._variance = variance

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AggregateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

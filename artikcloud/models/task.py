# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Task(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, filter=None, task_type=None, modified_on=None, dtid=None, status_counts=None, _property=None, id=None, dids=None, task_parameters=None, created_on=None, status=None):
        """
        Task - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'filter': 'str',
            'task_type': 'str',
            'modified_on': 'int',
            'dtid': 'str',
            'status_counts': 'TaskStatusCounts',
            '_property': 'str',
            'id': 'str',
            'dids': 'list[str]',
            'task_parameters': 'TaskParameters',
            'created_on': 'int',
            'status': 'str'
        }

        self.attribute_map = {
            'filter': 'filter',
            'task_type': 'taskType',
            'modified_on': 'modifiedOn',
            'dtid': 'dtid',
            'status_counts': 'statusCounts',
            '_property': 'property',
            'id': 'id',
            'dids': 'dids',
            'task_parameters': 'taskParameters',
            'created_on': 'createdOn',
            'status': 'status'
        }

        self._filter = filter
        self._task_type = task_type
        self._modified_on = modified_on
        self._dtid = dtid
        self._status_counts = status_counts
        self.__property = _property
        self._id = id
        self._dids = dids
        self._task_parameters = task_parameters
        self._created_on = created_on
        self._status = status

    @property
    def filter(self):
        """
        Gets the filter of this Task.
        Filter

        :return: The filter of this Task.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this Task.
        Filter

        :param filter: The filter of this Task.
        :type: str
        """

        self._filter = filter

    @property
    def task_type(self):
        """
        Gets the task_type of this Task.
        Task type

        :return: The task_type of this Task.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """
        Sets the task_type of this Task.
        Task type

        :param task_type: The task_type of this Task.
        :type: str
        """

        self._task_type = task_type

    @property
    def modified_on(self):
        """
        Gets the modified_on of this Task.
        Modified on

        :return: The modified_on of this Task.
        :rtype: int
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this Task.
        Modified on

        :param modified_on: The modified_on of this Task.
        :type: int
        """

        self._modified_on = modified_on

    @property
    def dtid(self):
        """
        Gets the dtid of this Task.
        Device Type ID

        :return: The dtid of this Task.
        :rtype: str
        """
        return self._dtid

    @dtid.setter
    def dtid(self, dtid):
        """
        Sets the dtid of this Task.
        Device Type ID

        :param dtid: The dtid of this Task.
        :type: str
        """

        self._dtid = dtid

    @property
    def status_counts(self):
        """
        Gets the status_counts of this Task.
        Status counts

        :return: The status_counts of this Task.
        :rtype: TaskStatusCounts
        """
        return self._status_counts

    @status_counts.setter
    def status_counts(self, status_counts):
        """
        Sets the status_counts of this Task.
        Status counts

        :param status_counts: The status_counts of this Task.
        :type: TaskStatusCounts
        """

        self._status_counts = status_counts

    @property
    def _property(self):
        """
        Gets the _property of this Task.
        Property

        :return: The _property of this Task.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """
        Sets the _property of this Task.
        Property

        :param _property: The _property of this Task.
        :type: str
        """

        self.__property = _property

    @property
    def id(self):
        """
        Gets the id of this Task.
        Task ID

        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Task.
        Task ID

        :param id: The id of this Task.
        :type: str
        """

        self._id = id

    @property
    def dids(self):
        """
        Gets the dids of this Task.
        Device IDs

        :return: The dids of this Task.
        :rtype: list[str]
        """
        return self._dids

    @dids.setter
    def dids(self, dids):
        """
        Sets the dids of this Task.
        Device IDs

        :param dids: The dids of this Task.
        :type: list[str]
        """

        self._dids = dids

    @property
    def task_parameters(self):
        """
        Gets the task_parameters of this Task.
        Task parameters

        :return: The task_parameters of this Task.
        :rtype: TaskParameters
        """
        return self._task_parameters

    @task_parameters.setter
    def task_parameters(self, task_parameters):
        """
        Sets the task_parameters of this Task.
        Task parameters

        :param task_parameters: The task_parameters of this Task.
        :type: TaskParameters
        """

        self._task_parameters = task_parameters

    @property
    def created_on(self):
        """
        Gets the created_on of this Task.
        Created on

        :return: The created_on of this Task.
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Task.
        Created on

        :param created_on: The created_on of this Task.
        :type: int
        """

        self._created_on = created_on

    @property
    def status(self):
        """
        Gets the status of this Task.
        Status

        :return: The status of this Task.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Task.
        Status

        :param status: The status of this Task.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NormalizedActionsEnvelope(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ddids=None, ddid=None, uid=None, start_date=None, end_date=None, order=None, next=None, count=None, size=None, data=None):
        """
        NormalizedActionsEnvelope - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ddids': 'str',
            'ddid': 'str',
            'uid': 'str',
            'start_date': 'int',
            'end_date': 'int',
            'order': 'str',
            'next': 'str',
            'count': 'int',
            'size': 'int',
            'data': 'list[NormalizedAction]'
        }

        self.attribute_map = {
            'ddids': 'ddids',
            'ddid': 'ddid',
            'uid': 'uid',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'order': 'order',
            'next': 'next',
            'count': 'count',
            'size': 'size',
            'data': 'data'
        }

        self._ddids = ddids
        self._ddid = ddid
        self._uid = uid
        self._start_date = start_date
        self._end_date = end_date
        self._order = order
        self._next = next
        self._count = count
        self._size = size
        self._data = data

    @property
    def ddids(self):
        """
        Gets the ddids of this NormalizedActionsEnvelope.

        :return: The ddids of this NormalizedActionsEnvelope.
        :rtype: str
        """
        return self._ddids

    @ddids.setter
    def ddids(self, ddids):
        """
        Sets the ddids of this NormalizedActionsEnvelope.

        :param ddids: The ddids of this NormalizedActionsEnvelope.
        :type: str
        """

        self._ddids = ddids

    @property
    def ddid(self):
        """
        Gets the ddid of this NormalizedActionsEnvelope.

        :return: The ddid of this NormalizedActionsEnvelope.
        :rtype: str
        """
        return self._ddid

    @ddid.setter
    def ddid(self, ddid):
        """
        Sets the ddid of this NormalizedActionsEnvelope.

        :param ddid: The ddid of this NormalizedActionsEnvelope.
        :type: str
        """

        self._ddid = ddid

    @property
    def uid(self):
        """
        Gets the uid of this NormalizedActionsEnvelope.

        :return: The uid of this NormalizedActionsEnvelope.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this NormalizedActionsEnvelope.

        :param uid: The uid of this NormalizedActionsEnvelope.
        :type: str
        """

        self._uid = uid

    @property
    def start_date(self):
        """
        Gets the start_date of this NormalizedActionsEnvelope.

        :return: The start_date of this NormalizedActionsEnvelope.
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this NormalizedActionsEnvelope.

        :param start_date: The start_date of this NormalizedActionsEnvelope.
        :type: int
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this NormalizedActionsEnvelope.

        :return: The end_date of this NormalizedActionsEnvelope.
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this NormalizedActionsEnvelope.

        :param end_date: The end_date of this NormalizedActionsEnvelope.
        :type: int
        """

        self._end_date = end_date

    @property
    def order(self):
        """
        Gets the order of this NormalizedActionsEnvelope.

        :return: The order of this NormalizedActionsEnvelope.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this NormalizedActionsEnvelope.

        :param order: The order of this NormalizedActionsEnvelope.
        :type: str
        """

        self._order = order

    @property
    def next(self):
        """
        Gets the next of this NormalizedActionsEnvelope.

        :return: The next of this NormalizedActionsEnvelope.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """
        Sets the next of this NormalizedActionsEnvelope.

        :param next: The next of this NormalizedActionsEnvelope.
        :type: str
        """

        self._next = next

    @property
    def count(self):
        """
        Gets the count of this NormalizedActionsEnvelope.

        :return: The count of this NormalizedActionsEnvelope.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this NormalizedActionsEnvelope.

        :param count: The count of this NormalizedActionsEnvelope.
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def size(self):
        """
        Gets the size of this NormalizedActionsEnvelope.

        :return: The size of this NormalizedActionsEnvelope.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this NormalizedActionsEnvelope.

        :param size: The size of this NormalizedActionsEnvelope.
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def data(self):
        """
        Gets the data of this NormalizedActionsEnvelope.

        :return: The data of this NormalizedActionsEnvelope.
        :rtype: list[NormalizedAction]
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this NormalizedActionsEnvelope.

        :param data: The data of this NormalizedActionsEnvelope.
        :type: list[NormalizedAction]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NormalizedActionsEnvelope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

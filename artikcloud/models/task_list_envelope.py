# coding: utf-8

"""
    ARTIK Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaskListEnvelope(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, total=None, data=None, status_counts=None, offset=None, count=None):
        """
        TaskListEnvelope - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'total': 'int',
            'data': 'TaskList',
            'status_counts': 'TasksStatusCounts',
            'offset': 'int',
            'count': 'int'
        }

        self.attribute_map = {
            'total': 'total',
            'data': 'data',
            'status_counts': 'statusCounts',
            'offset': 'offset',
            'count': 'count'
        }

        self._total = total
        self._data = data
        self._status_counts = status_counts
        self._offset = offset
        self._count = count

    @property
    def total(self):
        """
        Gets the total of this TaskListEnvelope.
        Total

        :return: The total of this TaskListEnvelope.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this TaskListEnvelope.
        Total

        :param total: The total of this TaskListEnvelope.
        :type: int
        """

        self._total = total

    @property
    def data(self):
        """
        Gets the data of this TaskListEnvelope.
        Envelope for task list

        :return: The data of this TaskListEnvelope.
        :rtype: TaskList
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this TaskListEnvelope.
        Envelope for task list

        :param data: The data of this TaskListEnvelope.
        :type: TaskList
        """

        self._data = data

    @property
    def status_counts(self):
        """
        Gets the status_counts of this TaskListEnvelope.
        Status counts

        :return: The status_counts of this TaskListEnvelope.
        :rtype: TasksStatusCounts
        """
        return self._status_counts

    @status_counts.setter
    def status_counts(self, status_counts):
        """
        Sets the status_counts of this TaskListEnvelope.
        Status counts

        :param status_counts: The status_counts of this TaskListEnvelope.
        :type: TasksStatusCounts
        """

        self._status_counts = status_counts

    @property
    def offset(self):
        """
        Gets the offset of this TaskListEnvelope.
        Offset

        :return: The offset of this TaskListEnvelope.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this TaskListEnvelope.
        Offset

        :param offset: The offset of this TaskListEnvelope.
        :type: int
        """

        self._offset = offset

    @property
    def count(self):
        """
        Gets the count of this TaskListEnvelope.
        Count

        :return: The count of this TaskListEnvelope.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this TaskListEnvelope.
        Count

        :param count: The count of this TaskListEnvelope.
        :type: int
        """

        self._count = count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaskListEnvelope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
